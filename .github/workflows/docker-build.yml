name: Docker Build and Push

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      push:
        description: 'Push images to registry'
        required: false
        default: 'false'

env:
  DOCKER_IMAGE: swallowarc/porker2
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' || github.event.inputs.push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          flavor: |
            latest=false
            suffix=-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' || github.event.inputs.push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.platform }}
            type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache-${{ matrix.platform }}
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.platform }}
            type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache-${{ matrix.platform }},mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Create manifest for multi-platform image
  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.inputs.push == 'true'
    
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Determine tag based on event
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG="${{ github.ref_name }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG="pr-${{ github.event.pull_request.number }}"
          fi
          
          # Create manifest list
          docker manifest create ${{ env.DOCKER_IMAGE }}:${TAG} \
            ${{ env.DOCKER_IMAGE }}:${TAG}-amd64 \
            ${{ env.DOCKER_IMAGE }}:${TAG}-arm64
          
          # Push manifest
          docker manifest push ${{ env.DOCKER_IMAGE }}:${TAG}
          
          # For version tags, also create major and major.minor tags
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix
            
            # Extract major and minor versions
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            
            # Create and push major.minor manifest
            docker manifest create ${{ env.DOCKER_IMAGE }}:${MAJOR}.${MINOR} \
              ${{ env.DOCKER_IMAGE }}:${TAG}-amd64 \
              ${{ env.DOCKER_IMAGE }}:${TAG}-arm64
            docker manifest push ${{ env.DOCKER_IMAGE }}:${MAJOR}.${MINOR}
            
            # Create and push major manifest
            docker manifest create ${{ env.DOCKER_IMAGE }}:${MAJOR} \
              ${{ env.DOCKER_IMAGE }}:${TAG}-amd64 \
              ${{ env.DOCKER_IMAGE }}:${TAG}-arm64
            docker manifest push ${{ env.DOCKER_IMAGE }}:${MAJOR}
          fi

  release:
    needs: create-manifest
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Docker Image
            
            Docker image has been published to Docker Hub:
            
            `${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}`
            
            ### Multi-Architecture Support
            
            This release includes images for both `linux/amd64` and `linux/arm64` platforms.
            
            ### Running with Docker
            
            ```bash
            # Pull the image (automatically selects the right architecture)
            docker pull ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
            
            # Run the container
            docker run -d \
              --name porker2 \
              -p 8080:8080 \
              -p 80:80 \
              -e REDIS_URL="redis://your-redis-host:6379" \
              -e PORKER2_ENV="production" \
              ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
            ```
            
            ### Running with Docker Compose
            
            ```yaml
            version: '3.8'
            services:
              porker2:
                image: ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
                ports:
                  - "8080:8080"
                  - "80:80"
                environment:
                  - REDIS_URL=redis://redis:6379
                  - PORKER2_ENV=production
                depends_on:
                  - redis
              
              redis:
                image: redis:7-alpine
                ports:
                  - "6379:6379"
            ```
            
            ### Build Optimizations
            
            This release uses an optimized build process with:
            - Layer caching for dependencies
            - Multi-stage parallel builds
            - Registry-based caching
            - Reduced image size
            
            ### Environment Variables
            
            - `REDIS_URL`: Redis connection URL (required)
            - `PORKER2_ENV`: Environment (development/production)
            - `LOG_LEVEL`: Logging level (debug/info/warn/error)
            
            See [README.md](https://github.com/${{ github.repository }}) for more details.