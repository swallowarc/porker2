// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: porker/v2/service.proto

package porkerv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/swallowarc/porker2/backend/internal/interface/pb/porker/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// Porker2ServiceName is the fully-qualified name of the Porker2Service service.
	Porker2ServiceName = "porker.v2.Porker2Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// Porker2ServiceLoginProcedure is the fully-qualified name of the Porker2Service's Login RPC.
	Porker2ServiceLoginProcedure = "/porker.v2.Porker2Service/Login"
	// Porker2ServiceLogoutProcedure is the fully-qualified name of the Porker2Service's Logout RPC.
	Porker2ServiceLogoutProcedure = "/porker.v2.Porker2Service/Logout"
	// Porker2ServiceVerifyUserProcedure is the fully-qualified name of the Porker2Service's VerifyUser
	// RPC.
	Porker2ServiceVerifyUserProcedure = "/porker.v2.Porker2Service/VerifyUser"
	// Porker2ServiceCreateRoomProcedure is the fully-qualified name of the Porker2Service's CreateRoom
	// RPC.
	Porker2ServiceCreateRoomProcedure = "/porker.v2.Porker2Service/CreateRoom"
	// Porker2ServiceCheckRoomProcedure is the fully-qualified name of the Porker2Service's CheckRoom
	// RPC.
	Porker2ServiceCheckRoomProcedure = "/porker.v2.Porker2Service/CheckRoom"
	// Porker2ServiceJoinRoomProcedure is the fully-qualified name of the Porker2Service's JoinRoom RPC.
	Porker2ServiceJoinRoomProcedure = "/porker.v2.Porker2Service/JoinRoom"
	// Porker2ServiceLeaveRoomProcedure is the fully-qualified name of the Porker2Service's LeaveRoom
	// RPC.
	Porker2ServiceLeaveRoomProcedure = "/porker.v2.Porker2Service/LeaveRoom"
	// Porker2ServiceCastVoteProcedure is the fully-qualified name of the Porker2Service's CastVote RPC.
	Porker2ServiceCastVoteProcedure = "/porker.v2.Porker2Service/CastVote"
	// Porker2ServiceShowVotesProcedure is the fully-qualified name of the Porker2Service's ShowVotes
	// RPC.
	Porker2ServiceShowVotesProcedure = "/porker.v2.Porker2Service/ShowVotes"
	// Porker2ServiceResetVotesProcedure is the fully-qualified name of the Porker2Service's ResetVotes
	// RPC.
	Porker2ServiceResetVotesProcedure = "/porker.v2.Porker2Service/ResetVotes"
	// Porker2ServiceKickUserProcedure is the fully-qualified name of the Porker2Service's KickUser RPC.
	Porker2ServiceKickUserProcedure = "/porker.v2.Porker2Service/KickUser"
	// Porker2ServiceUpdateRoomProcedure is the fully-qualified name of the Porker2Service's UpdateRoom
	// RPC.
	Porker2ServiceUpdateRoomProcedure = "/porker.v2.Porker2Service/UpdateRoom"
)

// Porker2ServiceClient is a client for the porker.v2.Porker2Service service.
type Porker2ServiceClient interface {
	Login(context.Context, *connect.Request[v2.LoginRequest]) (*connect.Response[v2.LoginResponse], error)
	Logout(context.Context, *connect.Request[v2.LogoutRequest]) (*connect.Response[v2.LogoutResponse], error)
	VerifyUser(context.Context, *connect.Request[v2.VerifyUserRequest]) (*connect.Response[v2.VerifyUserResponse], error)
	CreateRoom(context.Context, *connect.Request[v2.CreateRoomRequest]) (*connect.Response[v2.CreateRoomResponse], error)
	CheckRoom(context.Context, *connect.Request[v2.CheckRoomRequest]) (*connect.Response[v2.CheckRoomResponse], error)
	JoinRoom(context.Context, *connect.Request[v2.JoinRoomRequest]) (*connect.ServerStreamForClient[v2.JoinRoomResponse], error)
	LeaveRoom(context.Context, *connect.Request[v2.LeaveRoomRequest]) (*connect.Response[v2.LeaveRoomResponse], error)
	CastVote(context.Context, *connect.Request[v2.CastVoteRequest]) (*connect.Response[v2.CastVoteResponse], error)
	ShowVotes(context.Context, *connect.Request[v2.ShowVotesRequest]) (*connect.Response[v2.ShowVotesResponse], error)
	ResetVotes(context.Context, *connect.Request[v2.ResetVotesRequest]) (*connect.Response[v2.ResetVotesResponse], error)
	KickUser(context.Context, *connect.Request[v2.KickUserRequest]) (*connect.Response[v2.KickUserResponse], error)
	UpdateRoom(context.Context, *connect.Request[v2.UpdateRoomRequest]) (*connect.Response[v2.UpdateRoomResponse], error)
}

// NewPorker2ServiceClient constructs a client for the porker.v2.Porker2Service service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPorker2ServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) Porker2ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	porker2ServiceMethods := v2.File_porker_v2_service_proto.Services().ByName("Porker2Service").Methods()
	return &porker2ServiceClient{
		login: connect.NewClient[v2.LoginRequest, v2.LoginResponse](
			httpClient,
			baseURL+Porker2ServiceLoginProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v2.LogoutRequest, v2.LogoutResponse](
			httpClient,
			baseURL+Porker2ServiceLogoutProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		verifyUser: connect.NewClient[v2.VerifyUserRequest, v2.VerifyUserResponse](
			httpClient,
			baseURL+Porker2ServiceVerifyUserProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("VerifyUser")),
			connect.WithClientOptions(opts...),
		),
		createRoom: connect.NewClient[v2.CreateRoomRequest, v2.CreateRoomResponse](
			httpClient,
			baseURL+Porker2ServiceCreateRoomProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("CreateRoom")),
			connect.WithClientOptions(opts...),
		),
		checkRoom: connect.NewClient[v2.CheckRoomRequest, v2.CheckRoomResponse](
			httpClient,
			baseURL+Porker2ServiceCheckRoomProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("CheckRoom")),
			connect.WithClientOptions(opts...),
		),
		joinRoom: connect.NewClient[v2.JoinRoomRequest, v2.JoinRoomResponse](
			httpClient,
			baseURL+Porker2ServiceJoinRoomProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("JoinRoom")),
			connect.WithClientOptions(opts...),
		),
		leaveRoom: connect.NewClient[v2.LeaveRoomRequest, v2.LeaveRoomResponse](
			httpClient,
			baseURL+Porker2ServiceLeaveRoomProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("LeaveRoom")),
			connect.WithClientOptions(opts...),
		),
		castVote: connect.NewClient[v2.CastVoteRequest, v2.CastVoteResponse](
			httpClient,
			baseURL+Porker2ServiceCastVoteProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("CastVote")),
			connect.WithClientOptions(opts...),
		),
		showVotes: connect.NewClient[v2.ShowVotesRequest, v2.ShowVotesResponse](
			httpClient,
			baseURL+Porker2ServiceShowVotesProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("ShowVotes")),
			connect.WithClientOptions(opts...),
		),
		resetVotes: connect.NewClient[v2.ResetVotesRequest, v2.ResetVotesResponse](
			httpClient,
			baseURL+Porker2ServiceResetVotesProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("ResetVotes")),
			connect.WithClientOptions(opts...),
		),
		kickUser: connect.NewClient[v2.KickUserRequest, v2.KickUserResponse](
			httpClient,
			baseURL+Porker2ServiceKickUserProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("KickUser")),
			connect.WithClientOptions(opts...),
		),
		updateRoom: connect.NewClient[v2.UpdateRoomRequest, v2.UpdateRoomResponse](
			httpClient,
			baseURL+Porker2ServiceUpdateRoomProcedure,
			connect.WithSchema(porker2ServiceMethods.ByName("UpdateRoom")),
			connect.WithClientOptions(opts...),
		),
	}
}

// porker2ServiceClient implements Porker2ServiceClient.
type porker2ServiceClient struct {
	login      *connect.Client[v2.LoginRequest, v2.LoginResponse]
	logout     *connect.Client[v2.LogoutRequest, v2.LogoutResponse]
	verifyUser *connect.Client[v2.VerifyUserRequest, v2.VerifyUserResponse]
	createRoom *connect.Client[v2.CreateRoomRequest, v2.CreateRoomResponse]
	checkRoom  *connect.Client[v2.CheckRoomRequest, v2.CheckRoomResponse]
	joinRoom   *connect.Client[v2.JoinRoomRequest, v2.JoinRoomResponse]
	leaveRoom  *connect.Client[v2.LeaveRoomRequest, v2.LeaveRoomResponse]
	castVote   *connect.Client[v2.CastVoteRequest, v2.CastVoteResponse]
	showVotes  *connect.Client[v2.ShowVotesRequest, v2.ShowVotesResponse]
	resetVotes *connect.Client[v2.ResetVotesRequest, v2.ResetVotesResponse]
	kickUser   *connect.Client[v2.KickUserRequest, v2.KickUserResponse]
	updateRoom *connect.Client[v2.UpdateRoomRequest, v2.UpdateRoomResponse]
}

// Login calls porker.v2.Porker2Service.Login.
func (c *porker2ServiceClient) Login(ctx context.Context, req *connect.Request[v2.LoginRequest]) (*connect.Response[v2.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls porker.v2.Porker2Service.Logout.
func (c *porker2ServiceClient) Logout(ctx context.Context, req *connect.Request[v2.LogoutRequest]) (*connect.Response[v2.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// VerifyUser calls porker.v2.Porker2Service.VerifyUser.
func (c *porker2ServiceClient) VerifyUser(ctx context.Context, req *connect.Request[v2.VerifyUserRequest]) (*connect.Response[v2.VerifyUserResponse], error) {
	return c.verifyUser.CallUnary(ctx, req)
}

// CreateRoom calls porker.v2.Porker2Service.CreateRoom.
func (c *porker2ServiceClient) CreateRoom(ctx context.Context, req *connect.Request[v2.CreateRoomRequest]) (*connect.Response[v2.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// CheckRoom calls porker.v2.Porker2Service.CheckRoom.
func (c *porker2ServiceClient) CheckRoom(ctx context.Context, req *connect.Request[v2.CheckRoomRequest]) (*connect.Response[v2.CheckRoomResponse], error) {
	return c.checkRoom.CallUnary(ctx, req)
}

// JoinRoom calls porker.v2.Porker2Service.JoinRoom.
func (c *porker2ServiceClient) JoinRoom(ctx context.Context, req *connect.Request[v2.JoinRoomRequest]) (*connect.ServerStreamForClient[v2.JoinRoomResponse], error) {
	return c.joinRoom.CallServerStream(ctx, req)
}

// LeaveRoom calls porker.v2.Porker2Service.LeaveRoom.
func (c *porker2ServiceClient) LeaveRoom(ctx context.Context, req *connect.Request[v2.LeaveRoomRequest]) (*connect.Response[v2.LeaveRoomResponse], error) {
	return c.leaveRoom.CallUnary(ctx, req)
}

// CastVote calls porker.v2.Porker2Service.CastVote.
func (c *porker2ServiceClient) CastVote(ctx context.Context, req *connect.Request[v2.CastVoteRequest]) (*connect.Response[v2.CastVoteResponse], error) {
	return c.castVote.CallUnary(ctx, req)
}

// ShowVotes calls porker.v2.Porker2Service.ShowVotes.
func (c *porker2ServiceClient) ShowVotes(ctx context.Context, req *connect.Request[v2.ShowVotesRequest]) (*connect.Response[v2.ShowVotesResponse], error) {
	return c.showVotes.CallUnary(ctx, req)
}

// ResetVotes calls porker.v2.Porker2Service.ResetVotes.
func (c *porker2ServiceClient) ResetVotes(ctx context.Context, req *connect.Request[v2.ResetVotesRequest]) (*connect.Response[v2.ResetVotesResponse], error) {
	return c.resetVotes.CallUnary(ctx, req)
}

// KickUser calls porker.v2.Porker2Service.KickUser.
func (c *porker2ServiceClient) KickUser(ctx context.Context, req *connect.Request[v2.KickUserRequest]) (*connect.Response[v2.KickUserResponse], error) {
	return c.kickUser.CallUnary(ctx, req)
}

// UpdateRoom calls porker.v2.Porker2Service.UpdateRoom.
func (c *porker2ServiceClient) UpdateRoom(ctx context.Context, req *connect.Request[v2.UpdateRoomRequest]) (*connect.Response[v2.UpdateRoomResponse], error) {
	return c.updateRoom.CallUnary(ctx, req)
}

// Porker2ServiceHandler is an implementation of the porker.v2.Porker2Service service.
type Porker2ServiceHandler interface {
	Login(context.Context, *connect.Request[v2.LoginRequest]) (*connect.Response[v2.LoginResponse], error)
	Logout(context.Context, *connect.Request[v2.LogoutRequest]) (*connect.Response[v2.LogoutResponse], error)
	VerifyUser(context.Context, *connect.Request[v2.VerifyUserRequest]) (*connect.Response[v2.VerifyUserResponse], error)
	CreateRoom(context.Context, *connect.Request[v2.CreateRoomRequest]) (*connect.Response[v2.CreateRoomResponse], error)
	CheckRoom(context.Context, *connect.Request[v2.CheckRoomRequest]) (*connect.Response[v2.CheckRoomResponse], error)
	JoinRoom(context.Context, *connect.Request[v2.JoinRoomRequest], *connect.ServerStream[v2.JoinRoomResponse]) error
	LeaveRoom(context.Context, *connect.Request[v2.LeaveRoomRequest]) (*connect.Response[v2.LeaveRoomResponse], error)
	CastVote(context.Context, *connect.Request[v2.CastVoteRequest]) (*connect.Response[v2.CastVoteResponse], error)
	ShowVotes(context.Context, *connect.Request[v2.ShowVotesRequest]) (*connect.Response[v2.ShowVotesResponse], error)
	ResetVotes(context.Context, *connect.Request[v2.ResetVotesRequest]) (*connect.Response[v2.ResetVotesResponse], error)
	KickUser(context.Context, *connect.Request[v2.KickUserRequest]) (*connect.Response[v2.KickUserResponse], error)
	UpdateRoom(context.Context, *connect.Request[v2.UpdateRoomRequest]) (*connect.Response[v2.UpdateRoomResponse], error)
}

// NewPorker2ServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPorker2ServiceHandler(svc Porker2ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	porker2ServiceMethods := v2.File_porker_v2_service_proto.Services().ByName("Porker2Service").Methods()
	porker2ServiceLoginHandler := connect.NewUnaryHandler(
		Porker2ServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(porker2ServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceLogoutHandler := connect.NewUnaryHandler(
		Porker2ServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(porker2ServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceVerifyUserHandler := connect.NewUnaryHandler(
		Porker2ServiceVerifyUserProcedure,
		svc.VerifyUser,
		connect.WithSchema(porker2ServiceMethods.ByName("VerifyUser")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceCreateRoomHandler := connect.NewUnaryHandler(
		Porker2ServiceCreateRoomProcedure,
		svc.CreateRoom,
		connect.WithSchema(porker2ServiceMethods.ByName("CreateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceCheckRoomHandler := connect.NewUnaryHandler(
		Porker2ServiceCheckRoomProcedure,
		svc.CheckRoom,
		connect.WithSchema(porker2ServiceMethods.ByName("CheckRoom")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceJoinRoomHandler := connect.NewServerStreamHandler(
		Porker2ServiceJoinRoomProcedure,
		svc.JoinRoom,
		connect.WithSchema(porker2ServiceMethods.ByName("JoinRoom")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceLeaveRoomHandler := connect.NewUnaryHandler(
		Porker2ServiceLeaveRoomProcedure,
		svc.LeaveRoom,
		connect.WithSchema(porker2ServiceMethods.ByName("LeaveRoom")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceCastVoteHandler := connect.NewUnaryHandler(
		Porker2ServiceCastVoteProcedure,
		svc.CastVote,
		connect.WithSchema(porker2ServiceMethods.ByName("CastVote")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceShowVotesHandler := connect.NewUnaryHandler(
		Porker2ServiceShowVotesProcedure,
		svc.ShowVotes,
		connect.WithSchema(porker2ServiceMethods.ByName("ShowVotes")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceResetVotesHandler := connect.NewUnaryHandler(
		Porker2ServiceResetVotesProcedure,
		svc.ResetVotes,
		connect.WithSchema(porker2ServiceMethods.ByName("ResetVotes")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceKickUserHandler := connect.NewUnaryHandler(
		Porker2ServiceKickUserProcedure,
		svc.KickUser,
		connect.WithSchema(porker2ServiceMethods.ByName("KickUser")),
		connect.WithHandlerOptions(opts...),
	)
	porker2ServiceUpdateRoomHandler := connect.NewUnaryHandler(
		Porker2ServiceUpdateRoomProcedure,
		svc.UpdateRoom,
		connect.WithSchema(porker2ServiceMethods.ByName("UpdateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	return "/porker.v2.Porker2Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case Porker2ServiceLoginProcedure:
			porker2ServiceLoginHandler.ServeHTTP(w, r)
		case Porker2ServiceLogoutProcedure:
			porker2ServiceLogoutHandler.ServeHTTP(w, r)
		case Porker2ServiceVerifyUserProcedure:
			porker2ServiceVerifyUserHandler.ServeHTTP(w, r)
		case Porker2ServiceCreateRoomProcedure:
			porker2ServiceCreateRoomHandler.ServeHTTP(w, r)
		case Porker2ServiceCheckRoomProcedure:
			porker2ServiceCheckRoomHandler.ServeHTTP(w, r)
		case Porker2ServiceJoinRoomProcedure:
			porker2ServiceJoinRoomHandler.ServeHTTP(w, r)
		case Porker2ServiceLeaveRoomProcedure:
			porker2ServiceLeaveRoomHandler.ServeHTTP(w, r)
		case Porker2ServiceCastVoteProcedure:
			porker2ServiceCastVoteHandler.ServeHTTP(w, r)
		case Porker2ServiceShowVotesProcedure:
			porker2ServiceShowVotesHandler.ServeHTTP(w, r)
		case Porker2ServiceResetVotesProcedure:
			porker2ServiceResetVotesHandler.ServeHTTP(w, r)
		case Porker2ServiceKickUserProcedure:
			porker2ServiceKickUserHandler.ServeHTTP(w, r)
		case Porker2ServiceUpdateRoomProcedure:
			porker2ServiceUpdateRoomHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPorker2ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPorker2ServiceHandler struct{}

func (UnimplementedPorker2ServiceHandler) Login(context.Context, *connect.Request[v2.LoginRequest]) (*connect.Response[v2.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.Login is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) Logout(context.Context, *connect.Request[v2.LogoutRequest]) (*connect.Response[v2.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.Logout is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) VerifyUser(context.Context, *connect.Request[v2.VerifyUserRequest]) (*connect.Response[v2.VerifyUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.VerifyUser is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) CreateRoom(context.Context, *connect.Request[v2.CreateRoomRequest]) (*connect.Response[v2.CreateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.CreateRoom is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) CheckRoom(context.Context, *connect.Request[v2.CheckRoomRequest]) (*connect.Response[v2.CheckRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.CheckRoom is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) JoinRoom(context.Context, *connect.Request[v2.JoinRoomRequest], *connect.ServerStream[v2.JoinRoomResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.JoinRoom is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) LeaveRoom(context.Context, *connect.Request[v2.LeaveRoomRequest]) (*connect.Response[v2.LeaveRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.LeaveRoom is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) CastVote(context.Context, *connect.Request[v2.CastVoteRequest]) (*connect.Response[v2.CastVoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.CastVote is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) ShowVotes(context.Context, *connect.Request[v2.ShowVotesRequest]) (*connect.Response[v2.ShowVotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.ShowVotes is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) ResetVotes(context.Context, *connect.Request[v2.ResetVotesRequest]) (*connect.Response[v2.ResetVotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.ResetVotes is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) KickUser(context.Context, *connect.Request[v2.KickUserRequest]) (*connect.Response[v2.KickUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.KickUser is not implemented"))
}

func (UnimplementedPorker2ServiceHandler) UpdateRoom(context.Context, *connect.Request[v2.UpdateRoomRequest]) (*connect.Response[v2.UpdateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porker.v2.Porker2Service.UpdateRoom is not implemented"))
}
