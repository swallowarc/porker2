// Code generated by MockGen. DO NOT EDIT.
// Source: gateway.go
//
// Generated by this command:
//
//	mockgen -source=gateway.go -destination=../../test/mock/gateways/mock_gateway.go -package=mock_gateways
//

// Package mock_gateways is a generated GoMock package.
package mock_gateways

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockMemDBClient is a mock of MemDBClient interface.
type MockMemDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockMemDBClientMockRecorder
}

// MockMemDBClientMockRecorder is the mock recorder for MockMemDBClient.
type MockMemDBClientMockRecorder struct {
	mock *MockMemDBClient
}

// NewMockMemDBClient creates a new mock instance.
func NewMockMemDBClient(ctrl *gomock.Controller) *MockMemDBClient {
	mock := &MockMemDBClient{ctrl: ctrl}
	mock.recorder = &MockMemDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemDBClient) EXPECT() *MockMemDBClientMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockMemDBClient) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockMemDBClientMockRecorder) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockMemDBClient)(nil).Del), ctx, key)
}

// Expire mocks base method.
func (m *MockMemDBClient) Expire(ctx context.Context, key string, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockMemDBClientMockRecorder) Expire(ctx, key, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockMemDBClient)(nil).Expire), ctx, key, duration)
}

// Get mocks base method.
func (m *MockMemDBClient) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemDBClientMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemDBClient)(nil).Get), ctx, key)
}

// Ping mocks base method.
func (m *MockMemDBClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMemDBClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMemDBClient)(nil).Ping), ctx)
}

// PublishStream mocks base method.
func (m *MockMemDBClient) PublishStream(ctx context.Context, streamKey string, messages map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishStream", ctx, streamKey, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishStream indicates an expected call of PublishStream.
func (mr *MockMemDBClientMockRecorder) PublishStream(ctx, streamKey, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishStream", reflect.TypeOf((*MockMemDBClient)(nil).PublishStream), ctx, streamKey, messages)
}

// ReadStream mocks base method.
func (m *MockMemDBClient) ReadStream(ctx context.Context, streamKey, messageKey, previousID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStream", ctx, streamKey, messageKey, previousID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStream indicates an expected call of ReadStream.
func (mr *MockMemDBClientMockRecorder) ReadStream(ctx, streamKey, messageKey, previousID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStream", reflect.TypeOf((*MockMemDBClient)(nil).ReadStream), ctx, streamKey, messageKey, previousID)
}

// ReadStreamLatest mocks base method.
func (m *MockMemDBClient) ReadStreamLatest(ctx context.Context, streamKey, messageKey string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStreamLatest", ctx, streamKey, messageKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStreamLatest indicates an expected call of ReadStreamLatest.
func (mr *MockMemDBClientMockRecorder) ReadStreamLatest(ctx, streamKey, messageKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStreamLatest", reflect.TypeOf((*MockMemDBClient)(nil).ReadStreamLatest), ctx, streamKey, messageKey)
}

// SAdd mocks base method.
func (m *MockMemDBClient) SAdd(ctx context.Context, key string, values ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockMemDBClientMockRecorder) SAdd(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockMemDBClient)(nil).SAdd), varargs...)
}

// SMembers mocks base method.
func (m *MockMemDBClient) SMembers(ctx context.Context, key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembers indicates an expected call of SMembers.
func (mr *MockMemDBClientMockRecorder) SMembers(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockMemDBClient)(nil).SMembers), ctx, key)
}

// SRem mocks base method.
func (m *MockMemDBClient) SRem(ctx context.Context, key string, members ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SRem indicates an expected call of SRem.
func (mr *MockMemDBClientMockRecorder) SRem(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockMemDBClient)(nil).SRem), varargs...)
}

// Set mocks base method.
func (m *MockMemDBClient) Set(ctx context.Context, key string, value any, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMemDBClientMockRecorder) Set(ctx, key, value, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemDBClient)(nil).Set), ctx, key, value, duration)
}

// SetNX mocks base method.
func (m *MockMemDBClient) SetNX(ctx context.Context, key string, value any, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNX indicates an expected call of SetNX.
func (mr *MockMemDBClientMockRecorder) SetNX(ctx, key, value, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockMemDBClient)(nil).SetNX), ctx, key, value, duration)
}
