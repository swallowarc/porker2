// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../test/mock/port/mock_repository.go -package=mock_port
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	poker "github.com/swallowarc/porker2/backend/internal/domain/poker"
	user "github.com/swallowarc/porker2/backend/internal/domain/user"
	port "github.com/swallowarc/porker2/backend/internal/usecase/port"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, userName user.Name) (user.ID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userName)
	ret0, _ := ret[0].(user.ID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, userName)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(ctx context.Context, userID user.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), ctx, userID)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(ctx context.Context, userID user.ID) (user.Name, string, poker.RoomID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID)
	ret0, _ := ret[0].(user.Name)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(poker.RoomID)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), ctx, userID)
}

// GetIDByAccessToken mocks base method.
func (m *MockUserRepository) GetIDByAccessToken(ctx context.Context, token string) (user.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByAccessToken", ctx, token)
	ret0, _ := ret[0].(user.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByAccessToken indicates an expected call of GetIDByAccessToken.
func (mr *MockUserRepositoryMockRecorder) GetIDByAccessToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByAccessToken", reflect.TypeOf((*MockUserRepository)(nil).GetIDByAccessToken), ctx, token)
}

// GetIDByName mocks base method.
func (m *MockUserRepository) GetIDByName(ctx context.Context, userName user.Name) (user.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByName", ctx, userName)
	ret0, _ := ret[0].(user.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByName indicates an expected call of GetIDByName.
func (mr *MockUserRepositoryMockRecorder) GetIDByName(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByName", reflect.TypeOf((*MockUserRepository)(nil).GetIDByName), ctx, userName)
}

// ResetLifetime mocks base method.
func (m *MockUserRepository) ResetLifetime(ctx context.Context, userID user.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLifetime", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetLifetime indicates an expected call of ResetLifetime.
func (mr *MockUserRepositoryMockRecorder) ResetLifetime(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLifetime", reflect.TypeOf((*MockUserRepository)(nil).ResetLifetime), ctx, userID)
}

// UpdateRoomID mocks base method.
func (m *MockUserRepository) UpdateRoomID(ctx context.Context, userID user.ID, roomID poker.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomID", ctx, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomID indicates an expected call of UpdateRoomID.
func (mr *MockUserRepositoryMockRecorder) UpdateRoomID(ctx, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomID", reflect.TypeOf((*MockUserRepository)(nil).UpdateRoomID), ctx, userID, roomID)
}

// MockPokerRepository is a mock of PokerRepository interface.
type MockPokerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPokerRepositoryMockRecorder
}

// MockPokerRepositoryMockRecorder is the mock recorder for MockPokerRepository.
type MockPokerRepositoryMockRecorder struct {
	mock *MockPokerRepository
}

// NewMockPokerRepository creates a new mock instance.
func NewMockPokerRepository(ctrl *gomock.Controller) *MockPokerRepository {
	mock := &MockPokerRepository{ctrl: ctrl}
	mock.recorder = &MockPokerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokerRepository) EXPECT() *MockPokerRepositoryMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockPokerRepository) CreateRoom(ctx context.Context) (poker.RoomID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx)
	ret0, _ := ret[0].(poker.RoomID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockPokerRepositoryMockRecorder) CreateRoom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockPokerRepository)(nil).CreateRoom), ctx)
}

// GetRoomCondition mocks base method.
func (m *MockPokerRepository) GetRoomCondition(ctx context.Context, roomID poker.RoomID) (*poker.RoomCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomCondition", ctx, roomID)
	ret0, _ := ret[0].(*poker.RoomCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomCondition indicates an expected call of GetRoomCondition.
func (mr *MockPokerRepositoryMockRecorder) GetRoomCondition(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomCondition", reflect.TypeOf((*MockPokerRepository)(nil).GetRoomCondition), ctx, roomID)
}

// SubscribeRoomCondition mocks base method.
func (m *MockPokerRepository) SubscribeRoomCondition(ctx context.Context, roomID poker.RoomID, fn port.RoomSubscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeRoomCondition", ctx, roomID, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeRoomCondition indicates an expected call of SubscribeRoomCondition.
func (mr *MockPokerRepositoryMockRecorder) SubscribeRoomCondition(ctx, roomID, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeRoomCondition", reflect.TypeOf((*MockPokerRepository)(nil).SubscribeRoomCondition), ctx, roomID, fn)
}

// UpdateRoomWithLock mocks base method.
func (m *MockPokerRepository) UpdateRoomWithLock(ctx context.Context, roomID poker.RoomID, modifier port.RoomModifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomWithLock", ctx, roomID, modifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomWithLock indicates an expected call of UpdateRoomWithLock.
func (mr *MockPokerRepositoryMockRecorder) UpdateRoomWithLock(ctx, roomID, modifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomWithLock", reflect.TypeOf((*MockPokerRepository)(nil).UpdateRoomWithLock), ctx, roomID, modifier)
}
