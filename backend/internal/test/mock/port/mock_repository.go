// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../test/mock/port/mock_repository.go -package=mock_port
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// MockPokerRepository is a mock of PokerRepository interface.
type MockPokerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPokerRepositoryMockRecorder
}

// MockPokerRepositoryMockRecorder is the mock recorder for MockPokerRepository.
type MockPokerRepositoryMockRecorder struct {
	mock *MockPokerRepository
}

// NewMockPokerRepository creates a new mock instance.
func NewMockPokerRepository(ctrl *gomock.Controller) *MockPokerRepository {
	mock := &MockPokerRepository{ctrl: ctrl}
	mock.recorder = &MockPokerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokerRepository) EXPECT() *MockPokerRepositoryMockRecorder {
	return m.recorder
}
