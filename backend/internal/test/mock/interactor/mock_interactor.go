// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go
//
// Generated by this command:
//
//	mockgen -source=interactor.go -destination=../../test/mock/interactor/mock_interactor.go -package=mock_interactor
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	context "context"
	reflect "reflect"

	poker "github.com/swallowarc/porker2/backend/internal/domain/poker"
	user "github.com/swallowarc/porker2/backend/internal/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Kick mocks base method.
func (m *MockUser) Kick(ctx context.Context, userID, targetUserID user.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kick", ctx, userID, targetUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kick indicates an expected call of Kick.
func (mr *MockUserMockRecorder) Kick(ctx, userID, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kick", reflect.TypeOf((*MockUser)(nil).Kick), ctx, userID, targetUserID)
}

// Login mocks base method.
func (m *MockUser) Login(ctx context.Context, loginName user.Name) (user.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, loginName)
	ret0, _ := ret[0].(user.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserMockRecorder) Login(ctx, loginName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUser)(nil).Login), ctx, loginName)
}

// Logout mocks base method.
func (m *MockUser) Logout(ctx context.Context, userID user.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUserMockRecorder) Logout(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUser)(nil).Logout), ctx, userID)
}

// MockPoker is a mock of Poker interface.
type MockPoker struct {
	ctrl     *gomock.Controller
	recorder *MockPokerMockRecorder
}

// MockPokerMockRecorder is the mock recorder for MockPoker.
type MockPokerMockRecorder struct {
	mock *MockPoker
}

// NewMockPoker creates a new mock instance.
func NewMockPoker(ctrl *gomock.Controller) *MockPoker {
	mock := &MockPoker{ctrl: ctrl}
	mock.recorder = &MockPokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoker) EXPECT() *MockPokerMockRecorder {
	return m.recorder
}

// CastVote mocks base method.
func (m *MockPoker) CastVote(ctx context.Context, userID user.ID, roomID poker.RoomID, point poker.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CastVote", ctx, userID, roomID, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// CastVote indicates an expected call of CastVote.
func (mr *MockPokerMockRecorder) CastVote(ctx, userID, roomID, point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CastVote", reflect.TypeOf((*MockPoker)(nil).CastVote), ctx, userID, roomID, point)
}

// CreateRoom mocks base method.
func (m *MockPoker) CreateRoom(ctx context.Context, userID user.ID) (poker.RoomID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, userID)
	ret0, _ := ret[0].(poker.RoomID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockPokerMockRecorder) CreateRoom(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockPoker)(nil).CreateRoom), ctx, userID)
}

// JoinRoom mocks base method.
func (m *MockPoker) JoinRoom(ctx context.Context, userID user.ID, roomID poker.RoomID, ch chan<- *poker.RoomCondition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinRoom", ctx, userID, roomID, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinRoom indicates an expected call of JoinRoom.
func (mr *MockPokerMockRecorder) JoinRoom(ctx, userID, roomID, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRoom", reflect.TypeOf((*MockPoker)(nil).JoinRoom), ctx, userID, roomID, ch)
}

// LeaveRoom mocks base method.
func (m *MockPoker) LeaveRoom(ctx context.Context, userID user.ID, roomID poker.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveRoom", ctx, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveRoom indicates an expected call of LeaveRoom.
func (mr *MockPokerMockRecorder) LeaveRoom(ctx, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveRoom", reflect.TypeOf((*MockPoker)(nil).LeaveRoom), ctx, userID, roomID)
}

// ResetVotes mocks base method.
func (m *MockPoker) ResetVotes(ctx context.Context, userID user.ID, roomID poker.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetVotes", ctx, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetVotes indicates an expected call of ResetVotes.
func (mr *MockPokerMockRecorder) ResetVotes(ctx, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVotes", reflect.TypeOf((*MockPoker)(nil).ResetVotes), ctx, userID, roomID)
}

// ShowVotes mocks base method.
func (m *MockPoker) ShowVotes(ctx context.Context, userID user.ID, roomID poker.RoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowVotes", ctx, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowVotes indicates an expected call of ShowVotes.
func (mr *MockPokerMockRecorder) ShowVotes(ctx, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowVotes", reflect.TypeOf((*MockPoker)(nil).ShowVotes), ctx, userID, roomID)
}
